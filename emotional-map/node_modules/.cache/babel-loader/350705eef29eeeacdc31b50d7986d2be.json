{"ast":null,"code":"//index.js \n(function () {\n  var singles = ['Point', 'LineString', 'Polygon'];\n  var multies = ['MultiPoint', 'MultiLineString', 'MultiPolygon'];\n\n  function explode(g) {\n    if (multies.indexOf(g.type) > -1) {\n      return g.coordinates.map(function (part) {\n        var single = {};\n        single.type = g.type.replace('Multi', '');\n        single.coordinates = part;\n        if (g.crs) single.crs = g.crs;\n        return single;\n      });\n    } else {\n      return false;\n    }\n  }\n\n  function implode(gs) {\n    var sameType = gs.every(function (g) {\n      return singles.indexOf(g.type) > -1;\n    });\n    var crs = gs[0].crs || 0;\n    var sameCrs = gs.every(function (g) {\n      var gcrs = g.crs || 0;\n      return gcrs == crs;\n    });\n\n    if (sameType && sameCrs) {\n      var multi = {};\n      multi.type = 'Multi' + gs[0].type;\n      multi.coordinates = [];\n      if (crs != 0) multi.crs = crs;\n      gs.forEach(function (g) {\n        multi.coordinates.push(g.coordinates);\n      });\n      return multi;\n    } else {\n      return false;\n    }\n  }\n\n  ;\n  var multigeojson = {\n    explode: explode,\n    implode: implode\n  };\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = multigeojson;\n  } else if (window) {\n    window.multigeojson = multigeojson;\n  }\n})();","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/node_modules/multigeojson/index.js"],"names":["singles","multies","explode","g","indexOf","type","coordinates","map","part","single","replace","crs","implode","gs","sameType","every","sameCrs","gcrs","multi","forEach","push","multigeojson","module","exports","window"],"mappings":"AAAA;AACA,CAAC,YAAW;AACX,MAAIA,OAAO,GAAG,CAAC,OAAD,EAAU,YAAV,EAAwB,SAAxB,CAAd;AACA,MAAIC,OAAO,GAAG,CAAC,YAAD,EAAe,iBAAf,EAAkC,cAAlC,CAAd;;AACA,WAASC,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,QAAIF,OAAO,CAACG,OAAR,CAAgBD,CAAC,CAACE,IAAlB,IAA0B,CAAC,CAA/B,EAAkC;AAChC,aAAOF,CAAC,CAACG,WAAF,CAAcC,GAAd,CAAkB,UAASC,IAAT,EAAe;AACtC,YAAIC,MAAM,GAAG,EAAb;AACAA,QAAAA,MAAM,CAACJ,IAAP,GAAcF,CAAC,CAACE,IAAF,CAAOK,OAAP,CAAe,OAAf,EAAuB,EAAvB,CAAd;AACAD,QAAAA,MAAM,CAACH,WAAP,GAAqBE,IAArB;AACC,YAAGL,CAAC,CAACQ,GAAL,EAAUF,MAAM,CAACE,GAAP,GAAaR,CAAC,CAACQ,GAAf;AACX,eAAOF,MAAP;AACD,OANM,CAAP;AAOD,KARD,MAQO;AACL,aAAO,KAAP;AACD;AACF;;AACD,WAASG,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,QAAIC,QAAQ,GAAGD,EAAE,CAACE,KAAH,CAAS,UAASZ,CAAT,EAAY;AAClC,aAAOH,OAAO,CAACI,OAAR,CAAgBD,CAAC,CAACE,IAAlB,IAA0B,CAAC,CAAlC;AACD,KAFc,CAAf;AAGC,QAAIM,GAAG,GAAGE,EAAE,CAAC,CAAD,CAAF,CAAMF,GAAN,IAAa,CAAvB;AACA,QAAIK,OAAO,GAAGH,EAAE,CAACE,KAAH,CAAS,UAASZ,CAAT,EAAY;AACjC,UAAIc,IAAI,GAAGd,CAAC,CAACQ,GAAF,IAAS,CAApB;AACA,aAAOM,IAAI,IAAIN,GAAf;AACD,KAHa,CAAd;;AAID,QAAGG,QAAQ,IAAIE,OAAf,EAAwB;AACtB,UAAIE,KAAK,GAAG,EAAZ;AACAA,MAAAA,KAAK,CAACb,IAAN,GAAa,UAAUQ,EAAE,CAAC,CAAD,CAAF,CAAMR,IAA7B;AACAa,MAAAA,KAAK,CAACZ,WAAN,GAAoB,EAApB;AACC,UAAGK,GAAG,IAAI,CAAV,EAAaO,KAAK,CAACP,GAAN,GAAYA,GAAZ;AACdE,MAAAA,EAAE,CAACM,OAAH,CAAW,UAAShB,CAAT,EAAY;AACrBe,QAAAA,KAAK,CAACZ,WAAN,CAAkBc,IAAlB,CAAuBjB,CAAC,CAACG,WAAzB;AACD,OAFD;AAGA,aAAOY,KAAP;AACD,KATD,MASO;AACL,aAAO,KAAP;AACD;AACF;;AAAA;AACD,MAAIG,YAAY,GAAG;AACjBnB,IAAAA,OAAO,EAAEA,OADQ;AAEjBU,IAAAA,OAAO,EAAEA;AAFQ,GAAnB;;AAIA,MAAG,OAAOU,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAA3C,EAAoD;AAClDD,IAAAA,MAAM,CAACC,OAAP,GAAiBF,YAAjB;AACD,GAFD,MAEO,IAAGG,MAAH,EAAW;AAChBA,IAAAA,MAAM,CAACH,YAAP,GAAsBA,YAAtB;AACD;AACD,CA/CD","sourcesContent":["//index.js \n(function() { \n\tvar singles = ['Point', 'LineString', 'Polygon'];\n\tvar multies = ['MultiPoint', 'MultiLineString', 'MultiPolygon'];\n\tfunction explode(g) {\n\t  if( multies.indexOf(g.type) > -1) {\n\t    return g.coordinates.map(function(part) {\n\t      var single = {};\n\t      single.type = g.type.replace('Multi','');\n\t      single.coordinates = part;\n        if(g.crs) single.crs = g.crs;\n\t      return single;\n\t    });  \n\t  } else {\n\t    return false;\n\t  }\n\t}\n\tfunction implode(gs) {\n\t  var sameType = gs.every(function(g) { \n\t    return singles.indexOf(g.type) > -1;\n\t  })\n    var crs = gs[0].crs || 0;\n    var sameCrs = gs.every(function(g) {\n      var gcrs = g.crs || 0;\n      return gcrs == crs;\n    });\n\t  if(sameType && sameCrs) {\n\t    var multi = {};\n\t    multi.type = 'Multi' + gs[0].type;\n\t    multi.coordinates = [];\n      if(crs != 0) multi.crs = crs;\n\t    gs.forEach(function(g) {\n\t      multi.coordinates.push(g.coordinates);\n\t    });\n\t    return multi;\n\t  } else {\n\t    return false;\n\t  }\n\t};\n\tvar multigeojson = {\n\t  explode: explode,\n\t  implode: implode\n\t};\n\tif(typeof module !== 'undefined' && module.exports) {\n\t  module.exports = multigeojson;\n\t} else if(window) {\n\t  window.multigeojson = multigeojson;\n\t}\n})();\n"]},"metadata":{},"sourceType":"script"}