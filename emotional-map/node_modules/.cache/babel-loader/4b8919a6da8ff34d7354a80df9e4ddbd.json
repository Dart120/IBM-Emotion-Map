{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js\";\nimport React from \"react\";\nimport \"../index.css\";\nimport Mapp from './Mapp';\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport datum from '../output1.json';\n\nfunction Map(props) {\n  var width = 300,\n      height = 300;\n\n  function clickedRegion(geo) {\n    console.log(geo.properties.name);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"white\"\n    },\n    projectionConfig: {\n      center: [-2, 55.4],\n      rotation: [4.4, 0, 0],\n      parallels: [50, 60],\n      scale: 3000\n    },\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: datum,\n      children: ({\n        geographies\n      }) => {\n        let regions = geographies.map((geo, index) => {\n          console.log(index, geo.properties.name);\n          return /*#__PURE__*/_jsxDEV(Geography, {\n            onClick: geo => clickedRegion(geo),\n            name: geo.properties.name,\n            fill: index < 20 ? \"#FF0000\" : \"#ffffff\",\n            stroke: \"black\",\n            geography: geo\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this);\n        });\n        console.log(regions);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js"],"names":["React","Mapp","d3","topojson","ComposableMap","Geographies","Geography","datum","Map","props","width","height","clickedRegion","geo","console","log","properties","name","backgroundColor","center","rotation","parallels","scale","geographies","regions","map","index"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,SAArC,QAAsD,mBAAtD;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,MAAIC,KAAK,GAAG,GAAZ;AAAA,MACAC,MAAM,GAAG,GADT;;AAEA,WAASC,aAAT,CAAuBC,GAAvB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,UAAJ,CAAeC,IAA3B;AACD;;AACD,sBAIE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAACP,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,OAAxB;AAAiCO,MAAAA,eAAe,EAAE;AAAlD,KAAtB;AAAmF,IAAA,gBAAgB,EAAI;AAACC,MAAAA,MAAM,EAAC,CAAC,CAAC,CAAF,EAAK,IAAL,CAAR;AAAmBC,MAAAA,QAAQ,EAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,CAA5B;AAAsCC,MAAAA,SAAS,EAAC,CAAC,EAAD,EAAI,EAAJ,CAAhD;AAAwDC,MAAAA,KAAK,EAAE;AAA/D,KAAvG;AAAA,2BACA,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEf,KAAxB;AAAA,gBAEG,CAAC;AAAEgB,QAAAA;AAAF,OAAD,KAAqB;AACpB,YAAIC,OAAO,GAAGD,WAAW,CACxBE,GADa,CACT,CAACZ,GAAD,EAAKa,KAAL,KAAe;AAClBZ,UAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ,EAAkBb,GAAG,CAACG,UAAJ,CAAeC,IAAjC;AAEE,8BACE,QAAC,SAAD;AAAW,YAAA,OAAO,EAAGJ,GAAD,IAASD,aAAa,CAACC,GAAD,CAA1C;AAAiD,YAAA,IAAI,EAAIA,GAAG,CAACG,UAAJ,CAAeC,IAAxE;AAA8E,YAAA,IAAI,EAAGS,KAAK,GAAG,EAAT,GAAe,SAAf,GAA2B,SAA/G;AAA0H,YAAA,MAAM,EAAC,OAAjI;AAAqJ,YAAA,SAAS,EAAEb;AAAhK,aAA8Ia,KAA9I;AAAA;AAAA;AAAA;AAAA,kBADF;AAID,SARW,CAAd;AAaFZ,QAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AACG;AAjBL;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAJF;AA+BD;;KArCQhB,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React from \"react\";\n\nimport \"../index.css\";\nimport Mapp from './Mapp'\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport datum from '../output1.json'\n\n\nfunction Map(props) {\n  var width = 300,\n  height = 300;\n  function clickedRegion(geo){\n    console.log(geo.properties.name)\n  }\n  return (\n  \n      \n   \n    <ComposableMap style={{width: \"100%\", height: \"100vh\", backgroundColor: \"white\"}}  projectionConfig = {{center:[-2, 55.4],rotation:[4.4,0,0],parallels:[50,60],scale: 3000}}>\n    <Geographies geography={datum}>\n      {\n       ({ geographies }) => {\n        let regions = geographies\n        .map((geo,index) => {\n          console.log(index,geo.properties.name)\n        \n            return(\n              <Geography onClick={(geo) => clickedRegion(geo)} name = {geo.properties.name} fill={(index < 20) ? \"#FF0000\" : \"#ffffff\"} stroke='black' key={index} geography={geo} />\n                )\n            \n          }\n        \n         \n        \n      )\n      console.log(regions)\n        }\n        \n      }\n      \n    </Geographies>\n  </ComposableMap>\n    \n        \n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}