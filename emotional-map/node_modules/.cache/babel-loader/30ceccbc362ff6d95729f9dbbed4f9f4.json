{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js\";\nimport React from \"react\";\nimport \"../index.css\";\nimport Mapp from './Mapp';\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport datum from '../output1.json';\n\nfunction Map(props) {\n  var width = 300,\n      height = 300;\n\n  function clickedRegion(geo) {}\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"white\"\n    },\n    projectionConfig: {\n      center: [-2, 55.4],\n      rotation: [4.4, 0, 0],\n      parallels: [50, 60],\n      scale: 3000\n    },\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: datum,\n      children: ({\n        geographies\n      }) => geographies.map((geo, index) => {\n        console.log(index, geo.properties.name);\n        return /*#__PURE__*/_jsxDEV(Geography, {\n          onClick: geo => clickedRegion(geo),\n          fill: index < 20 ? \"#FF0000\" : \"#ffffff\",\n          stroke: \"black\",\n          geography: geo\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this) // <Mapp></Mapp>\n  ;\n}\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js"],"names":["React","Mapp","d3","topojson","ComposableMap","Geographies","Geography","datum","Map","props","width","height","clickedRegion","geo","backgroundColor","center","rotation","parallels","scale","geographies","map","index","console","log","properties","name"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,SAArC,QAAsD,mBAAtD;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,MAAIC,KAAK,GAAG,GAAZ;AAAA,MACAC,MAAM,GAAG,GADT;;AAEA,WAASC,aAAT,CAAuBC,GAAvB,EAA2B,CAE1B;;AACD,sBAIE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAACH,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,OAAxB;AAAiCG,MAAAA,eAAe,EAAE;AAAlD,KAAtB;AAAmF,IAAA,gBAAgB,EAAI;AAACC,MAAAA,MAAM,EAAC,CAAC,CAAC,CAAF,EAAK,IAAL,CAAR;AAAmBC,MAAAA,QAAQ,EAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,CAA5B;AAAsCC,MAAAA,SAAS,EAAC,CAAC,EAAD,EAAI,EAAJ,CAAhD;AAAwDC,MAAAA,KAAK,EAAE;AAA/D,KAAvG;AAAA,2BACA,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEX,KAAxB;AAAA,gBACG,CAAC;AAAEY,QAAAA;AAAF,OAAD,KAECA,WAAW,CACVC,GADD,CACK,CAACP,GAAD,EAAKQ,KAAL,KAAe;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAAkBR,GAAG,CAACW,UAAJ,CAAeC,IAAjC;AAEE,4BACE,QAAC,SAAD;AAAW,UAAA,OAAO,EAAGZ,GAAD,IAASD,aAAa,CAACC,GAAD,CAA1C;AAAiD,UAAA,IAAI,EAAGQ,KAAK,GAAG,EAAT,GAAe,SAAf,GAA2B,SAAlF;AAA6F,UAAA,MAAM,EAAC,OAApG;AAAwH,UAAA,SAAS,EAAER;AAAnI,WAAiHQ,KAAjH;AAAA;AAAA;AAAA;AAAA,gBADF;AAID,OARH;AAHJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAJF,CAuBE;AAvBF;AA0BD;;KAhCQb,G;AAkCT,eAAeA,GAAf","sourcesContent":["import React from \"react\";\n\nimport \"../index.css\";\nimport Mapp from './Mapp'\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport datum from '../output1.json'\n\n\nfunction Map(props) {\n  var width = 300,\n  height = 300;\n  function clickedRegion(geo){\n    \n  }\n  return (\n  \n      \n   \n    <ComposableMap style={{width: \"100%\", height: \"100vh\", backgroundColor: \"white\"}}  projectionConfig = {{center:[-2, 55.4],rotation:[4.4,0,0],parallels:[50,60],scale: 3000}}>\n    <Geographies geography={datum}>\n      {({ geographies }) =>\n      \n        geographies\n        .map((geo,index) => {\n          console.log(index,geo.properties.name)\n        \n            return(\n              <Geography onClick={(geo) => clickedRegion(geo)} fill={(index < 20) ? \"#FF0000\" : \"#ffffff\"} stroke='black' key={index} geography={geo} />\n                )\n            \n          }\n         \n        \n      )\n      }\n    </Geographies>\n  </ComposableMap>\n    // <Mapp></Mapp>\n        \n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}