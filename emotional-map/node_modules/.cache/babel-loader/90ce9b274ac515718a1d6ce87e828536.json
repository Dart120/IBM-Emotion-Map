{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoMercator, geoPath } from 'd3';\nimport datum from '../mapnoholes.json';\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth';\nimport useScreenHeight from '../Hooks/useScreenHeight';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nfunction Marks({\n  data\n}, props) {\n  _s();\n\n  const [fills, setFills] = useState(new Array(data.features.length).fill('none'));\n  const [polygons, setPolygons] = useState(0);\n  var options = {\n    viewportSize: {\n      width: 1000,\n      height: 500\n    },\n    mapExtent: {\n      left: -180,\n      bottom: -200,\n      right: 180,\n      top: 200\n    },\n    output: 'svg'\n  };\n  var converter = geojson2svg(options);\n  var svgStrings = converter.convert(datum, options);\n  var svgElements = svgStrings.map(function (svgString) {\n    return parseSVG(svgString);\n  });\n  console.log(svgStrings);\n  let screenWidth = useScreenWidth();\n  let screenHeight = useScreenHeight();\n  var width = 0.3 * screenWidth,\n      height = 0.6 * screenHeight;\n  const projection = geoAlbers().center([55, 3]).scale(7000).translate([width / 2, height / 2]);\n  console.log(height, width);\n  let colours = {\n    joy: 'red',\n    sadness: 'blue',\n    anger: 'orange',\n    fear: 'yellow',\n    confident: 'green'\n  };\n  const path = geoPath(projection).projection(projection);\n\n  function changeColour(index) {\n    // 1. Make a shallow copy of the array\n    let temp_state = [...fills]; // 2. Make a shallow copy of the element you want to mutate\n\n    let temp_element = fills[index];\n    temp_element = 'black'; // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n\n    temp_state[index] = temp_element; // 5. Set the state to our new copy\n\n    setFills(temp_state);\n    console.log('done');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: // data.features.map((feature, index) => {\n    //   return (\n    //  <path onClick = {() => changeColour(index)} fill={fills[index]} stroke='red' d = {path(feature)} key = {feature.properties.NAME_2} />\n    // )})\n    svgStrings.map(string => ReactHtmlParser(string))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marks, \"PTTCKF4qk5lAUZAIus26OnXwVjk=\", false, function () {\n  return [useScreenWidth, useScreenHeight];\n});\n\n_c = Marks;\nexport default Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js"],"names":["React","useState","useEffect","geoMercator","geoPath","datum","geojson2svg","parseSVG","useScreenWidth","useScreenHeight","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Marks","data","props","fills","setFills","Array","features","length","fill","polygons","setPolygons","options","viewportSize","width","height","mapExtent","left","bottom","right","top","output","converter","svgStrings","convert","svgElements","map","svgString","console","log","screenWidth","screenHeight","projection","geoAlbers","center","scale","translate","colours","joy","sadness","anger","fear","confident","path","changeColour","index","temp_state","temp_element","string"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }from \"react\";\nimport { geoMercator,geoPath } from 'd3';\nimport datum from '../mapnoholes.json'\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth'\nimport useScreenHeight from '../Hooks/useScreenHeight'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\n\n\nfunction Marks ({data},props){\n    const [fills,setFills] = useState(new Array(data.features.length).fill('none'))\n    const [polygons, setPolygons] = useState(0)\n    var options =   {\n      viewportSize: {width: 1000, height: 500},\n      mapExtent: {left: -180, bottom: -200, right: 180, top: 200},\n      output: 'svg' \n    }\n    var converter = geojson2svg(options);\n    var svgStrings = converter.convert(datum,options);\n    var svgElements = svgStrings.map(function(svgString) {\n      return parseSVG(svgString)\n    })\n    console.log(svgStrings)\n    let screenWidth = useScreenWidth()\n    let screenHeight = useScreenHeight()\n    var width = 0.3 * screenWidth,\n    height = 0.6 * screenHeight;\n    const projection = geoAlbers()\n    .center([55, 3])\n    \n   \n    .scale(7000)\n    .translate([width / 2, height / 2]);\n  console.log(height,width)\n    let colours = {\n      joy: 'red',\n      sadness: 'blue',\n      anger:'orange',\n      fear:'yellow',\n      confident:'green'\n    }\nconst path = geoPath(projection).projection(projection);\nfunction changeColour(index){\n  \t// 1. Make a shallow copy of the array\n\tlet temp_state = [...fills];\n\t\n\t// 2. Make a shallow copy of the element you want to mutate\n\tlet temp_element = fills[index];\n\t\n\n\ttemp_element = 'black'\n\t// 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n\ttemp_state[index] = temp_element;\n\t\n\t// 5. Set the state to our new copy\n\tsetFills( temp_state );\n  console.log('done')\n}\n    \nreturn (\n    \n    <g className=\"marks\">\n      {\n        // data.features.map((feature, index) => {\n          \n        //   return (\n        //  <path onClick = {() => changeColour(index)} fill={fills[index]} stroke='red' d = {path(feature)} key = {feature.properties.NAME_2} />\n        // )})\n        svgStrings.map(string => ReactHtmlParser(string))\n      }\n      \n    </g>\n  );\n} \nexport default Marks\n"]},"metadata":{},"sourceType":"module"}