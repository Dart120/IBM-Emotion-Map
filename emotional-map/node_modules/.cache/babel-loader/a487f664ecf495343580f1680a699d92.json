{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath } from 'd3';\nimport useScreenWidth from '../Hooks/useScreenWidth';\nimport useScreenHeight from '../Hooks/useScreenHeight';\n\nfunction Marks({\n  data\n}, props) {\n  _s();\n\n  const [fills, setFills] = useState('none');\n  const [polygons, setPolygons] = useState(0);\n  let screenWidth = useScreenWidth();\n  let screenHeight = useScreenHeight();\n  var width = 0.3 * screenWidth,\n      height = 0.6 * screenHeight;\n  const projection = geoAlbers().center([0, 55.4]).rotate([4.4, 0]).parallels([50, 60]).scale(5000).translate([width / 2, height / 2]);\n  let colours = {\n    joy: 'red',\n    sadness: 'blue',\n    anger: 'orange',\n    fear: 'yellow',\n    confident: 'green'\n  };\n  const path = geoPath(projection).projection(projection);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: data.features.map(feature => {\n      let newFills = fills + ['none'];\n      setFills(newFills);\n      setPolygons(polygons++);\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        onClick: () => ch,\n        fill: fills[polygons - 1],\n        stroke: \"red\",\n        d: path(feature)\n      }, feature.properties.NAME_2, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 10\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marks, \"Pe7sDhmtVIJNqNvQhH0n/CHNw2E=\", false, function () {\n  return [useScreenWidth, useScreenHeight];\n});\n\n_c = Marks;\nexport default Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","useScreenWidth","useScreenHeight","Marks","data","props","fills","setFills","polygons","setPolygons","screenWidth","screenHeight","width","height","projection","center","rotate","parallels","scale","translate","colours","joy","sadness","anger","fear","confident","path","features","map","feature","newFills","ch","properties","NAME_2"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,EAAmBC,OAAnB,QAAkC,IAAlC;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;;AAIA,SAASC,KAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAAuBC,KAAvB,EAA6B;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBV,QAAQ,CAAC,MAAD,CAAjC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,CAAD,CAAxC;AACA,MAAIa,WAAW,GAAGT,cAAc,EAAhC;AACA,MAAIU,YAAY,GAAGT,eAAe,EAAlC;AACA,MAAIU,KAAK,GAAG,MAAMF,WAAlB;AAAA,MACAG,MAAM,GAAG,MAAMF,YADf;AAEA,QAAMG,UAAU,GAAGf,SAAS,GAC3BgB,MADkB,CACX,CAAC,CAAD,EAAI,IAAJ,CADW,EAElBC,MAFkB,CAEX,CAAC,GAAD,EAAM,CAAN,CAFW,EAGlBC,SAHkB,CAGR,CAAC,EAAD,EAAK,EAAL,CAHQ,EAIlBC,KAJkB,CAIZ,IAJY,EAKlBC,SALkB,CAKR,CAACP,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CALQ,CAAnB;AAMA,MAAIO,OAAO,GAAG;AACZC,IAAAA,GAAG,EAAE,KADO;AAEZC,IAAAA,OAAO,EAAE,MAFG;AAGZC,IAAAA,KAAK,EAAC,QAHM;AAIZC,IAAAA,IAAI,EAAC,QAJO;AAKZC,IAAAA,SAAS,EAAC;AALE,GAAd;AAOJ,QAAMC,IAAI,GAAG1B,OAAO,CAACc,UAAD,CAAP,CAAoBA,UAApB,CAA+BA,UAA/B,CAAb;AAEA,sBAEI;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA,cAEIV,IAAI,CAACuB,QAAL,CAAcC,GAAd,CAAkBC,OAAO,IAAI;AAC3B,UAAIC,QAAQ,GAAGxB,KAAK,GAAG,CAAC,MAAD,CAAvB;AACAC,MAAAA,QAAQ,CAACuB,QAAD,CAAR;AACArB,MAAAA,WAAW,CAACD,QAAQ,EAAT,CAAX;AACA,0BACD;AAAM,QAAA,OAAO,EAAI,MAAMuB,EAAvB;AAA2B,QAAA,IAAI,EAAEzB,KAAK,CAACE,QAAQ,GAAG,CAAZ,CAAtC;AAAsD,QAAA,MAAM,EAAC,KAA7D;AAAmE,QAAA,CAAC,EAAIkB,IAAI,CAACG,OAAD;AAA5E,SAA8FA,OAAO,CAACG,UAAR,CAAmBC,MAAjH;AAAA;AAAA;AAAA;AAAA,cADC;AAEA,KANF;AAFJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAcC;;GApCQ9B,K;UAGaF,c,EACCC,e;;;KAJdC,K;AAqCT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect }from \"react\";\nimport { geoAlbers,geoPath } from 'd3';\nimport useScreenWidth from '../Hooks/useScreenWidth'\nimport useScreenHeight from '../Hooks/useScreenHeight'\n\n\n\nfunction Marks ({data},props){\n    const [fills,setFills] = useState('none')\n    const [polygons, setPolygons] = useState(0)\n    let screenWidth = useScreenWidth()\n    let screenHeight = useScreenHeight()\n    var width = 0.3 * screenWidth,\n    height = 0.6 * screenHeight;\n    const projection = geoAlbers()\n    .center([0, 55.4])\n    .rotate([4.4, 0])\n    .parallels([50, 60])\n    .scale(5000)\n    .translate([width / 2, height / 2]);\n    let colours = {\n      joy: 'red',\n      sadness: 'blue',\n      anger:'orange',\n      fear:'yellow',\n      confident:'green'\n    }\nconst path = geoPath(projection).projection(projection);\n    \nreturn (\n    \n    <g className=\"marks\">\n      {\n        data.features.map(feature => {\n          let newFills = fills + ['none']\n          setFills(newFills)\n          setPolygons(polygons++)\n          return (\n         <path onClick = {() => ch} fill={fills[polygons - 1]} stroke='red' d = {path(feature)} key = {feature.properties.NAME_2} />\n        )})\n      }\n    </g>\n  );\n} \nexport default Marks\n"]},"metadata":{},"sourceType":"module"}