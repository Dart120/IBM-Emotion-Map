{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../index.css\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport datum from '../output1.json';\nimport Region from './Region';\n\nfunction Map(props) {\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"white\"\n    },\n    projectionConfig: {\n      center: [-2, 55.4],\n      rotation: [4.4, 0, 0],\n      parallels: [50, 60],\n      scale: 3000\n    },\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      zoom: 1,\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: datum,\n        children: ({\n          geographies\n        }) => {\n          geographies.forEach((geo, index) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Geography, {\n                name: geo.properties.name,\n                fill: index < 20 ? \"#FF0000\" : \"#ffffff\",\n                stroke: \"black\",\n                geography: geo\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 15\n              }, this)\n            }, void 0, false);\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js"],"names":["React","useState","useEffect","ComposableMap","Geographies","Geography","ZoomableGroup","datum","Region","Map","props","width","height","backgroundColor","center","rotation","parallels","scale","geographies","forEach","geo","index","properties","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,cAAP;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,SAArC,EAAgDC,aAAhD,QAAqE,mBAArE;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAElB,sBAIE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,OAAxB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KAAtB;AAAmF,IAAA,gBAAgB,EAAI;AAACC,MAAAA,MAAM,EAAC,CAAC,CAAC,CAAF,EAAK,IAAL,CAAR;AAAmBC,MAAAA,QAAQ,EAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,CAA5B;AAAsCC,MAAAA,SAAS,EAAC,CAAC,EAAD,EAAI,EAAJ,CAAhD;AAAwDC,MAAAA,KAAK,EAAE;AAA/D,KAAvG;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAE,CAArB;AAAA,6BACF,QAAC,WAAD;AAAa,QAAA,SAAS,EAAEV,KAAxB;AAAA,kBAGG,CAAC;AAAEW,UAAAA;AAAF,SAAD,KAAqB;AACpBA,UAAAA,WAAW,CACVC,OADD,CACS,CAACC,GAAD,EAAKC,KAAL,KAAe;AACpB,gCACE;AAAA,qCAEA,QAAC,SAAD;AAAY,gBAAA,IAAI,EAAID,GAAG,CAACE,UAAJ,CAAeC,IAAnC;AAAyC,gBAAA,IAAI,EAAGF,KAAK,GAAG,EAAT,GAAe,SAAf,GAA2B,SAA1E;AAAqF,gBAAA,MAAM,EAAC,OAA5F;AAAgH,gBAAA,SAAS,EAAED;AAA3H,iBAAyGC,KAAzG;AAAA;AAAA;AAAA;AAAA;AAFA,6BADF;AAOD,WATH;AAeC;AAnBL;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAJF;AAmCD;;KArCQZ,G;AAuCT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"../index.css\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport datum from '../output1.json'\nimport Region from './Region'\n\n\nfunction Map(props) {\n  \n  return (\n  \n      \n   \n    <ComposableMap style={{width: \"100%\", height: \"100vh\", backgroundColor: \"white\"}}  projectionConfig = {{center:[-2, 55.4],rotation:[4.4,0,0],parallels:[50,60],scale: 3000}}>\n      <ZoomableGroup zoom={1}>\n    <Geographies geography={datum}>\n    \n      {\n       ({ geographies }) => {\n        geographies\n        .forEach((geo,index) => {\n            return(\n              <>\n              \n              <Geography  name = {geo.properties.name} fill={(index < 20) ? \"#FF0000\" : \"#ffffff\"} stroke='black' key={index} geography={geo} />\n              </>\n                )\n            \n          }\n        \n         \n        \n      )\n      \n        }\n        \n      }\n      \n    </Geographies>\n    </ZoomableGroup>\n  </ComposableMap>\n    \n        \n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}