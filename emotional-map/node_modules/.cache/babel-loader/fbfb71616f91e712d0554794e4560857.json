{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../index.css\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport datum from '../output1.json';\nimport Region from './Region';\n\nfunction Map(props) {\n  _s();\n\n  const [colours, setColours] = useState({});\n  const mapData = props.mapData;\n  const colourCode = props.colourCode;\n  useEffect(() => {\n    function calcColour(regionData) {\n      let max = 0;\n      let colour = '';\n\n      for (let key in colourCode) {\n        if (regionData[key] > max) {\n          colour = colourCode[key];\n        }\n\n        return colour;\n      }\n    }\n\n    mapData.forEach(regionData => setColours({ ...colours,\n      [regionData.name]: calcColour(regionData)\n    }));\n  }, [mapData]);\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"white\"\n    },\n    projectionConfig: {\n      center: [-2, 55.4],\n      rotation: [4.4, 0, 0],\n      parallels: [50, 60],\n      scale: 3000\n    },\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      zoom: 1,\n      children: /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: datum,\n        children: ({\n          geographies\n        }) => {\n          geographies.forEach((geo, index) => {\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Region, {\n                geo: geo,\n                colour: colours[geo.properties.name]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Geography, {\n                name: geo.properties.name,\n                fill: index < 20 ? \"#FF0000\" : \"#ffffff\",\n                stroke: \"black\",\n                geography: geo\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true);\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"MuPVYaWF9RT5DzxxoZOrVRsagEA=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js"],"names":["React","useState","useEffect","ComposableMap","Geographies","Geography","ZoomableGroup","datum","Region","Map","props","colours","setColours","mapData","colourCode","calcColour","regionData","max","colour","key","forEach","name","width","height","backgroundColor","center","rotation","parallels","scale","geographies","geo","index","properties"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAO,cAAP;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,SAArC,EAAgDC,aAAhD,QAAqE,mBAArE;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBX,QAAQ,CAAC,EAAD,CAArC;AACA,QAAMY,OAAO,GAAGH,KAAK,CAACG,OAAtB;AACA,QAAMC,UAAU,GAAGJ,KAAK,CAACI,UAAzB;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,aAASa,UAAT,CAAoBC,UAApB,EAAgC;AAC9B,UAAIC,GAAG,GAAG,CAAV;AACA,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,GAAT,IAAgBL,UAAhB,EAA2B;AACzB,YAAIE,UAAU,CAACG,GAAD,CAAV,GAAkBF,GAAtB,EAA0B;AACxBC,UAAAA,MAAM,GAAGJ,UAAU,CAACK,GAAD,CAAnB;AACD;;AACH,eAAOD,MAAP;AACC;AACF;;AACDL,IAAAA,OAAO,CAACO,OAAR,CAAiBJ,UAAD,IAAgBJ,UAAU,CAAC,EACzC,GAAGD,OADsC;AAExC,OAACK,UAAU,CAACK,IAAZ,GAAoBN,UAAU,CAACC,UAAD;AAFU,KAAD,CAA1C;AAGD,GAdQ,EAcP,CAACH,OAAD,CAdO,CAAT;AAeA,sBAIE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAACS,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,OAAxB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KAAtB;AAAmF,IAAA,gBAAgB,EAAI;AAACC,MAAAA,MAAM,EAAC,CAAC,CAAC,CAAF,EAAK,IAAL,CAAR;AAAmBC,MAAAA,QAAQ,EAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,CAA5B;AAAsCC,MAAAA,SAAS,EAAC,CAAC,EAAD,EAAI,EAAJ,CAAhD;AAAwDC,MAAAA,KAAK,EAAE;AAA/D,KAAvG;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,IAAI,EAAE,CAArB;AAAA,6BACF,QAAC,WAAD;AAAa,QAAA,SAAS,EAAErB,KAAxB;AAAA,kBAGG,CAAC;AAAEsB,UAAAA;AAAF,SAAD,KAAqB;AACpBA,UAAAA,WAAW,CACVT,OADD,CACS,CAACU,GAAD,EAAKC,KAAL,KAAe;AACpB,gCACE;AAAA,sCACA,QAAC,MAAD;AAAQ,gBAAA,GAAG,EAAID,GAAf;AAAoB,gBAAA,MAAM,EAAInB,OAAO,CAACmB,GAAG,CAACE,UAAJ,CAAeX,IAAhB;AAArC;AAAA;AAAA;AAAA;AAAA,sBADA,eAEA,QAAC,SAAD;AAAY,gBAAA,IAAI,EAAIS,GAAG,CAACE,UAAJ,CAAeX,IAAnC;AAAyC,gBAAA,IAAI,EAAGU,KAAK,GAAG,EAAT,GAAe,SAAf,GAA2B,SAA1E;AAAqF,gBAAA,MAAM,EAAC,OAA5F;AAAgH,gBAAA,SAAS,EAAED;AAA3H,iBAAyGC,KAAzG;AAAA;AAAA;AAAA;AAAA,sBAFA;AAAA,4BADF;AAOD,WATH;AAeC;AAnBL;AAAA;AAAA;AAAA;AAAA;AADE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UAJF;AAmCD;;GAtDQtB,G;;KAAAA,G;AAwDT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport \"../index.css\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from \"react-simple-maps\";\nimport datum from '../output1.json'\nimport Region from './Region'\n\n\nfunction Map(props) {\n  const [colours,setColours] = useState({})\n  const mapData = props.mapData\n  const colourCode = props.colourCode\n  useEffect(() => {\n    function calcColour(regionData) {\n      let max = 0\n      let colour = ''\n      for (let key in colourCode){\n        if (regionData[key] > max){\n          colour = colourCode[key]\n        }\n      return colour\n      }\n    }\n    mapData.forEach((regionData) => setColours({\n      ...colours,\n       [regionData.name] : calcColour(regionData)}))\n  },[mapData])\n  return (\n  \n      \n   \n    <ComposableMap style={{width: \"100%\", height: \"100vh\", backgroundColor: \"white\"}}  projectionConfig = {{center:[-2, 55.4],rotation:[4.4,0,0],parallels:[50,60],scale: 3000}}>\n      <ZoomableGroup zoom={1}>\n    <Geographies geography={datum}>\n    \n      {\n       ({ geographies }) => {\n        geographies\n        .forEach((geo,index) => {\n            return(\n              <>\n              <Region geo = {geo} colour = {colours[geo.properties.name]}></Region>\n              <Geography  name = {geo.properties.name} fill={(index < 20) ? \"#FF0000\" : \"#ffffff\"} stroke='black' key={index} geography={geo} />\n              </>\n                )\n            \n          }\n        \n         \n        \n      )\n      \n        }\n        \n      }\n      \n    </Geographies>\n    </ZoomableGroup>\n  </ComposableMap>\n    \n        \n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}