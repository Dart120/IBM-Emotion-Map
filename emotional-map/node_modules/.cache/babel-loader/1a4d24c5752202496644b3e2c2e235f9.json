{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath } from 'd3';\nimport datum from '../mapfinal.json';\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth';\nimport useScreenHeight from '../Hooks/useScreenHeight';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nfunction App() {\n  _s();\n\n  let [mapp, setMapp] = useState([]);\n  useEffect(() => {\n    fetch('https://s3-us-west-2.amazonaws.com/s.cdpn.io/535422/map.json').then(response => response.json()).then(data => setMapp(topojson.feature(data, data.objects.subunits).features));\n  }, []);\n  var width = 960,\n      height = 1160;\n  var projection = d3.geo.albers().center([0, 55.4]).rotate([4.4, 0]).parallels([50, 60]).scale(100).translate([width / 2, height / 2]);\n  let path = d3.geo.path().projection(projection);\n  let paths = mapp.map(feature => path(feature));\n  console.log(mapp);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      fill: \"none\",\n      width: width,\n      height: height,\n      xmlns: \"http://www.w3.org/2000/svg\",\n      children: paths.map((path, index) => index === 5 ? /*#__PURE__*/_jsxDEV(\"path\", {\n        stroke: \"black\",\n        fill: \"red\",\n        d: path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 45\n      }, this) : /*#__PURE__*/_jsxDEV(\"path\", {\n        stroke: \"black\",\n        fillRule: \"nonzero\",\n        fill: \"none\",\n        d: path\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 98\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"SRkHO/u6Lf4inCEEzgYN56L4M3A=\");\n\n_c = App;\n\nfunction Marks({\n  data\n}, props) {\n  _s2();\n\n  let screenWidth = useScreenWidth();\n  let screenHeight = useScreenHeight();\n  var width = 0.3 * screenWidth,\n      height = 0.6 * screenHeight;\n  var projection = geoAlbers().center([0, 55.4]).rotate([4.4, 0]).parallels([50, 60]).scale(1000).translate([width / 2, height / 2]);\n  const path = geoPath(projection).projection(projection);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: datum.features.filter((feature, index) => index !== 5).map((feature, index) => {\n      // console.log(feature.properties.NAME_2)\n      if (index === 12) {\n        console.log(feature);\n        return /*#__PURE__*/_jsxDEV(\"path\", {\n          stroke: \"black\",\n          fillRule: \"nonzero\",\n          fill: \"red\",\n          d: path(feature)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        stroke: \"black\",\n        fillRule: \"nonzero\",\n        fill: \"none\",\n        d: path(feature)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this);\n    }) //svgStrings.map(string => ReactHtmlParser(string))\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Marks, \"Sv7JuxlZU8UfxrDV/MiINKoEJqs=\", false, function () {\n  return [useScreenWidth, useScreenHeight];\n});\n\n_c2 = Marks;\nexport default Marks;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Marks\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","datum","geojson2svg","parseSVG","useScreenWidth","useScreenHeight","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","App","mapp","setMapp","fetch","then","response","json","data","topojson","feature","objects","subunits","features","width","height","projection","d3","geo","albers","center","rotate","parallels","scale","translate","path","paths","map","console","log","index","Marks","props","screenWidth","screenHeight","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }from \"react\";\nimport { geoAlbers,geoPath } from 'd3';\n\nimport datum from '../mapfinal.json'\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth'\nimport useScreenHeight from '../Hooks/useScreenHeight'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nfunction App() {\n  let [mapp,setMapp] = useState([])\n  useEffect(() => {\n    fetch('https://s3-us-west-2.amazonaws.com/s.cdpn.io/535422/map.json')\n    .then(response => response.json())\n    .then(data => setMapp(topojson.feature(data,data.objects.subunits).features))\n  }, [])\n\n  var width = 960,\n    height = 1160;\n\n    var projection = d3.geo.albers()\n    .center([0, 55.4])\n    .rotate([4.4, 0])\n    .parallels([50, 60])\n    .scale(100)\n    .translate([width / 2, height / 2]);\n  let path = d3.geo.path().projection(projection)\n  let paths = mapp.map(feature => path(feature))\n  console.log(mapp)\n  return (\n    <div className=\"App\">\n      <svg fill = \"none\" width = {width} height = {height} xmlns=\"http://www.w3.org/2000/svg\">\n  {\n    paths.map((path,index) => index === 5 ? <path stroke='black' fill='red' d = {path}></path> : <path stroke='black' fillRule='nonzero' fill='none' d = {path}></path> )\n  }\n</svg>\n    </div>\n  ); }\n\nfunction Marks ({data},props){\n    \n   \n  \n    \n    let screenWidth = useScreenWidth()\n    let screenHeight = useScreenHeight()\n    var width = 0.3 * screenWidth,\n    height = 0.6 * screenHeight;\n    var projection = geoAlbers()\n    .center([0, 55.4])\n    .rotate([4.4, 0])\n    .parallels([50, 60])\n    .scale(1000)\n    .translate([width / 2, height / 2]);\n\n\nconst path = geoPath(projection).projection(projection);\n\n\nreturn (\n    \n    <g className=\"marks\">\n      {\n        datum.features.filter((feature,index)=> index !== 5).map((feature, index) => {\n          // console.log(feature.properties.NAME_2)\n          if (index === 12){\n            console.log(feature)\n            return (\n         \n              <path stroke='black' fillRule='nonzero' fill='red' d = {path(feature)}></path> \n            )\n          }\n          \n          return (\n         \n          <path stroke='black' fillRule='nonzero' fill='none' d = {path(feature)}></path> \n        )})\n        //svgStrings.map(string => ReactHtmlParser(string))\n      }\n      \n    </g>\n  );\n} \n\nexport default Marks\n"]},"metadata":{},"sourceType":"module"}