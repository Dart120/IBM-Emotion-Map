{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"../index.css\";\nimport Mapp from './Mapp';\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport datum from '../output1.json';\n\nfunction Map(props) {\n  _s();\n\n  const [colours, setColours] = useState({});\n  const mapData = props.useEffect(() => {}, []);\n\n  function clickedRegion(geo) {\n    console.log(geo.properties.name);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      backgroundColor: \"white\"\n    },\n    projectionConfig: {\n      center: [-2, 55.4],\n      rotation: [4.4, 0, 0],\n      parallels: [50, 60],\n      scale: 3000\n    },\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: datum,\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: ({\n          geographies\n        }) => {\n          let regions = geographies.forEach((geo, index) => {\n            console.log(index, geo.properties.name);\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              name: geo.properties.name,\n              fill: index < 20 ? \"#FF0000\" : \"#ffffff\",\n              stroke: \"black\",\n              geography: geo\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 15\n            }, this);\n          });\n        }\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Map, \"06W3PVaJN8I6BA+3VpUwWs+nBr4=\");\n\n_c = Map;\nexport default Map;\n\nvar _c;\n\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Map.js"],"names":["React","useState","useEffect","Mapp","d3","topojson","ComposableMap","Geographies","Geography","datum","Map","props","colours","setColours","mapData","clickedRegion","geo","console","log","properties","name","width","height","backgroundColor","center","rotation","parallels","scale","geographies","regions","forEach","index"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AAEA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,SAArC,QAAsD,mBAAtD;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,OAAD,EAASC,UAAT,IAAuBZ,QAAQ,CAAC,EAAD,CAArC;AACA,QAAMa,OAAO,GAAGH,KAAK,CACrBT,SADgB,CACN,MAAM,CAEf,CAHe,EAGd,EAHc,CAAhB;;AAKA,WAASa,aAAT,CAAuBC,GAAvB,EAA2B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,UAAJ,CAAeC,IAA3B;AACD;;AACD,sBAIE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE,MAAR;AAAgBC,MAAAA,MAAM,EAAE,OAAxB;AAAiCC,MAAAA,eAAe,EAAE;AAAlD,KAAtB;AAAmF,IAAA,gBAAgB,EAAI;AAACC,MAAAA,MAAM,EAAC,CAAC,CAAC,CAAF,EAAK,IAAL,CAAR;AAAmBC,MAAAA,QAAQ,EAAC,CAAC,GAAD,EAAK,CAAL,EAAO,CAAP,CAA5B;AAAsCC,MAAAA,SAAS,EAAC,CAAC,EAAD,EAAI,EAAJ,CAAhD;AAAwDC,MAAAA,KAAK,EAAE;AAA/D,KAAvG;AAAA,2BACA,QAAC,WAAD;AAAa,MAAA,SAAS,EAAElB,KAAxB;AAAA,6BACE;AAAA,kBAEC,CAAC;AAAEmB,UAAAA;AAAF,SAAD,KAAqB;AACpB,cAAIC,OAAO,GAAGD,WAAW,CACxBE,OADa,CACL,CAACd,GAAD,EAAKe,KAAL,KAAe;AACtBd,YAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ,EAAkBf,GAAG,CAACG,UAAJ,CAAeC,IAAjC;AAEE,gCACE,QAAC,SAAD;AAAY,cAAA,IAAI,EAAIJ,GAAG,CAACG,UAAJ,CAAeC,IAAnC;AAAyC,cAAA,IAAI,EAAGW,KAAK,GAAG,EAAT,GAAe,SAAf,GAA2B,SAA1E;AAAqF,cAAA,MAAM,EAAC,OAA5F;AAAgH,cAAA,SAAS,EAAEf;AAA3H,eAAyGe,KAAzG;AAAA;AAAA;AAAA;AAAA,oBADF;AAID,WARW,CAAd;AAcC;AAjBH;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAJF;AAiCD;;GA3CQrB,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\n\nimport \"../index.css\";\nimport Mapp from './Mapp'\nimport * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport datum from '../output1.json'\n\n\nfunction Map(props) {\n  const [colours,setColours] = useState({})\n  const mapData = props.\n  useEffect(() => {\n    \n  },[])\n\n  function clickedRegion(geo){\n    console.log(geo.properties.name)\n  }\n  return (\n  \n      \n   \n    <ComposableMap style={{width: \"100%\", height: \"100vh\", backgroundColor: \"white\"}}  projectionConfig = {{center:[-2, 55.4],rotation:[4.4,0,0],parallels:[50,60],scale: 3000}}>\n    <Geographies geography={datum}>\n      <>\n      {\n       ({ geographies }) => {\n        let regions = geographies\n        .forEach((geo,index) => {\n          console.log(index,geo.properties.name)\n        \n            return(\n              <Geography  name = {geo.properties.name} fill={(index < 20) ? \"#FF0000\" : \"#ffffff\"} stroke='black' key={index} geography={geo} />\n                )\n            \n          }\n        \n         \n        \n      )\n      \n        }\n        \n      }\n      </>\n      \n    </Geographies>\n  </ComposableMap>\n    \n        \n  );\n}\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}