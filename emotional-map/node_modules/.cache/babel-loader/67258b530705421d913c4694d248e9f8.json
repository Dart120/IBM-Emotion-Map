{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath } from 'd3';\nimport datum from '../aaaaa.json';\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth';\nimport useScreenHeight from '../Hooks/useScreenHeight';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nfunction Marks({\n  data\n}, props) {\n  _s();\n\n  const [fills, setFills] = useState(new Array(data.features.length).fill('none'));\n  const [polygons, setPolygons] = useState(0);\n  let screenWidth = useScreenWidth();\n  let screenHeight = useScreenHeight();\n  var width = 0.3 * screenWidth,\n      height = 0.6 * screenHeight;\n  var projection = geoAlbers().center([0, 55.4]).rotate([4.4, 0]).parallels([50, 60]).scale(6000).translate([width / 2, height / 2]);\n  const path = geoPath(projection).projection(projection);\n\n  function changeColour(index) {\n    // 1. Make a shallow copy of the array\n    let temp_state = [...fills]; // 2. Make a shallow copy of the element you want to mutate\n\n    let temp_element = fills[index];\n    temp_element = 'black'; // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n\n    temp_state[index] = temp_element; // 5. Set the state to our new copy\n\n    setFills(temp_state);\n    console.log('done');\n  } // function calculateScaleCenter(features) {\n  //   // Get the bounding box of the paths (in pixels!) and calculate a\n  //   // scale factor based on the size of the bounding box and the map\n  //   // size.\n  //   var bbox_path = path.bounds(features),\n  //       scale = 0.95 / Math.max(\n  //         (bbox_path[1][0] - bbox_path[0][0]) / width,\n  //         (bbox_path[1][1] - bbox_path[0][1]) / height\n  //       );\n  //   // Get the bounding box of the features (in map units!) and use it\n  //   // to calculate the center of the features.\n  //   var bbox_feature = d3.geo.bounds(features),\n  //       center = [\n  //         (bbox_feature[1][0] + bbox_feature[0][0]) / 2,\n  //         (bbox_feature[1][1] + bbox_feature[0][1]) / 2];\n  //   return {\n  //     'scale': scale,\n  //     'center': center\n  //   };\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marks, \"PTTCKF4qk5lAUZAIus26OnXwVjk=\", false, function () {\n  return [useScreenWidth, useScreenHeight];\n});\n\n_c = Marks;\nexport default Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","datum","geojson2svg","parseSVG","useScreenWidth","useScreenHeight","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Marks","data","props","fills","setFills","Array","features","length","fill","polygons","setPolygons","screenWidth","screenHeight","width","height","projection","center","rotate","parallels","scale","translate","path","changeColour","index","temp_state","temp_element","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,EAAmBC,OAAnB,QAAkC,IAAlC;AAEA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,eAAP,IAA0BC,YAA1B,EAAwCC,oBAAxC,EAA8DC,WAA9D,QAAiF,mBAAjF;;AAIA,SAASC,KAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAAuBC,KAAvB,EAA6B;AAAA;;AACzB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBjB,QAAQ,CAAC,IAAIkB,KAAJ,CAAUJ,IAAI,CAACK,QAAL,CAAcC,MAAxB,EAAgCC,IAAhC,CAAqC,MAArC,CAAD,CAAjC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,CAAD,CAAxC;AAIA,MAAIwB,WAAW,GAAGjB,cAAc,EAAhC;AACA,MAAIkB,YAAY,GAAGjB,eAAe,EAAlC;AACA,MAAIkB,KAAK,GAAG,MAAMF,WAAlB;AAAA,MACAG,MAAM,GAAG,MAAMF,YADf;AAEA,MAAIG,UAAU,GAAG1B,SAAS,GACzB2B,MADgB,CACT,CAAC,CAAD,EAAI,IAAJ,CADS,EAEhBC,MAFgB,CAET,CAAC,GAAD,EAAM,CAAN,CAFS,EAGhBC,SAHgB,CAGN,CAAC,EAAD,EAAK,EAAL,CAHM,EAIhBC,KAJgB,CAIV,IAJU,EAKhBC,SALgB,CAKN,CAACP,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CALM,CAAjB;AAQJ,QAAMO,IAAI,GAAG/B,OAAO,CAACyB,UAAD,CAAP,CAAoBA,UAApB,CAA+BA,UAA/B,CAAb;;AAEA,WAASO,YAAT,CAAsBC,KAAtB,EAA4B;AACzB;AACF,QAAIC,UAAU,GAAG,CAAC,GAAGrB,KAAJ,CAAjB,CAF2B,CAI3B;;AACA,QAAIsB,YAAY,GAAGtB,KAAK,CAACoB,KAAD,CAAxB;AAGAE,IAAAA,YAAY,GAAG,OAAf,CAR2B,CAS3B;;AACAD,IAAAA,UAAU,CAACD,KAAD,CAAV,GAAoBE,YAApB,CAV2B,CAY3B;;AACArB,IAAAA,QAAQ,CAAEoB,UAAF,CAAR;AACCE,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,GAnC4B,CAoC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,sBAEI;AAAG,IAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAFJ;AAcC;;GAzEQ3B,K;UAMaN,c,EACCC,e;;;KAPdK,K;AA2ET,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect }from \"react\";\nimport { geoAlbers,geoPath } from 'd3';\n\nimport datum from '../aaaaa.json'\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth'\nimport useScreenHeight from '../Hooks/useScreenHeight'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\n\n\nfunction Marks ({data},props){\n    const [fills,setFills] = useState(new Array(data.features.length).fill('none'))\n    const [polygons, setPolygons] = useState(0)\n   \n  \n    \n    let screenWidth = useScreenWidth()\n    let screenHeight = useScreenHeight()\n    var width = 0.3 * screenWidth,\n    height = 0.6 * screenHeight;\n    var projection = geoAlbers()\n    .center([0, 55.4])\n    .rotate([4.4, 0])\n    .parallels([50, 60])\n    .scale(6000)\n    .translate([width / 2, height / 2]);\n\n\nconst path = geoPath(projection).projection(projection);\n\nfunction changeColour(index){\n  \t// 1. Make a shallow copy of the array\n\tlet temp_state = [...fills];\n\t\n\t// 2. Make a shallow copy of the element you want to mutate\n\tlet temp_element = fills[index];\n\t\n\n\ttemp_element = 'black'\n\t// 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n\ttemp_state[index] = temp_element;\n\t\n\t// 5. Set the state to our new copy\n\tsetFills( temp_state );\n  console.log('done')\n}\n// function calculateScaleCenter(features) {\n//   // Get the bounding box of the paths (in pixels!) and calculate a\n//   // scale factor based on the size of the bounding box and the map\n//   // size.\n//   var bbox_path = path.bounds(features),\n//       scale = 0.95 / Math.max(\n//         (bbox_path[1][0] - bbox_path[0][0]) / width,\n//         (bbox_path[1][1] - bbox_path[0][1]) / height\n//       );\n\n//   // Get the bounding box of the features (in map units!) and use it\n//   // to calculate the center of the features.\n//   var bbox_feature = d3.geo.bounds(features),\n//       center = [\n//         (bbox_feature[1][0] + bbox_feature[0][0]) / 2,\n//         (bbox_feature[1][1] + bbox_feature[0][1]) / 2];\n\n//   return {\n//     'scale': scale,\n//     'center': center\n//   };\n// }\n    \nreturn (\n    \n    <g className=\"marks\">\n      {\n        // data.features.map((feature, index) => {\n          \n        //   return (\n        //  <path onClick = {() => changeColour(index)} fill={fills[index]} stroke='red' d = {path(feature)} key = {feature.properties.NAME_2} />\n        // )})\n        //svgStrings.map(string => ReactHtmlParser(string))\n      }\n      \n    </g>\n  );\n} \n\nexport default Marks\n"]},"metadata":{},"sourceType":"module"}