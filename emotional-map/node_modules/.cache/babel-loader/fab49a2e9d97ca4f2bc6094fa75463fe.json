{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { geoAlbers, geoPath } from 'd3';\nimport datum from '../mapfinal.json';\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth';\nimport useScreenHeight from '../Hooks/useScreenHeight';\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nfunction Marks({\n  data\n}, props) {\n  _s();\n\n  let screenWidth = useScreenWidth();\n  let screenHeight = useScreenHeight();\n  var width = 0.3 * screenWidth,\n      height = 0.6 * screenHeight;\n  var projection = geoAlbers().center([0, 55.4]).rotate([4.4, 0]).parallels([50, 60]).scale(1000).translate([width / 2, height / 2]);\n  const path = geoPath(projection).projection(projection);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"marks\",\n    children: datum.features.filter((feature, index) => index !== 5).map((feature, index) => {\n      // console.log(feature.properties.NAME_2)\n      if (index === 12) {\n        console.log(feta);\n        return /*#__PURE__*/_jsxDEV(\"path\", {\n          stroke: \"black\",\n          fillRule: \"nonzero\",\n          fill: \"red\",\n          d: path(feature)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"path\", {\n        stroke: \"black\",\n        fillRule: \"nonzero\",\n        fill: \"none\",\n        d: path(feature)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this);\n    }) //svgStrings.map(string => ReactHtmlParser(string))\n\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marks, \"Sv7JuxlZU8UfxrDV/MiINKoEJqs=\", false, function () {\n  return [useScreenWidth, useScreenHeight];\n});\n\n_c = Marks;\nexport default Marks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"sources":["/Users/temi/Documents/Projects/IBM-Emotion-Map/emotional-map/src/Components/Marks.js"],"names":["React","useState","useEffect","geoAlbers","geoPath","datum","geojson2svg","parseSVG","useScreenWidth","useScreenHeight","ReactHtmlParser","processNodes","convertNodeToElement","htmlparser2","Marks","data","props","screenWidth","screenHeight","width","height","projection","center","rotate","parallels","scale","translate","path","features","filter","feature","index","map","console","log","feta"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,EAAmBC,OAAnB,QAAkC,IAAlC;AAEA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,eAAP,IAA0BC,YAA1B,EAAwCC,oBAAxC,EAA8DC,WAA9D,QAAiF,mBAAjF;;AAIA,SAASC,KAAT,CAAgB;AAACC,EAAAA;AAAD,CAAhB,EAAuBC,KAAvB,EAA6B;AAAA;;AAKzB,MAAIC,WAAW,GAAGT,cAAc,EAAhC;AACA,MAAIU,YAAY,GAAGT,eAAe,EAAlC;AACA,MAAIU,KAAK,GAAG,MAAMF,WAAlB;AAAA,MACAG,MAAM,GAAG,MAAMF,YADf;AAEA,MAAIG,UAAU,GAAGlB,SAAS,GACzBmB,MADgB,CACT,CAAC,CAAD,EAAI,IAAJ,CADS,EAEhBC,MAFgB,CAET,CAAC,GAAD,EAAM,CAAN,CAFS,EAGhBC,SAHgB,CAGN,CAAC,EAAD,EAAK,EAAL,CAHM,EAIhBC,KAJgB,CAIV,IAJU,EAKhBC,SALgB,CAKN,CAACP,KAAK,GAAG,CAAT,EAAYC,MAAM,GAAG,CAArB,CALM,CAAjB;AAQJ,QAAMO,IAAI,GAAGvB,OAAO,CAACiB,UAAD,CAAP,CAAoBA,UAApB,CAA+BA,UAA/B,CAAb;AAGA,sBAEI;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA,cAEIhB,KAAK,CAACuB,QAAN,CAAeC,MAAf,CAAsB,CAACC,OAAD,EAASC,KAAT,KAAkBA,KAAK,KAAK,CAAlD,EAAqDC,GAArD,CAAyD,CAACF,OAAD,EAAUC,KAAV,KAAoB;AAC3E;AACA,UAAIA,KAAK,KAAK,EAAd,EAAiB;AACfE,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,4BAEE;AAAM,UAAA,MAAM,EAAC,OAAb;AAAqB,UAAA,QAAQ,EAAC,SAA9B;AAAwC,UAAA,IAAI,EAAC,KAA7C;AAAmD,UAAA,CAAC,EAAIR,IAAI,CAACG,OAAD;AAA5D;AAAA;AAAA;AAAA;AAAA,gBAFF;AAID;;AAED,0BAEA;AAAM,QAAA,MAAM,EAAC,OAAb;AAAqB,QAAA,QAAQ,EAAC,SAA9B;AAAwC,QAAA,IAAI,EAAC,MAA7C;AAAoD,QAAA,CAAC,EAAIH,IAAI,CAACG,OAAD;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFA;AAGA,KAbF,CAFJ,CAgBI;;AAhBJ;AAAA;AAAA;AAAA;AAAA,UAFJ;AAuBC;;GA3CQhB,K;UAKaN,c,EACCC,e;;;KANdK,K;AA6CT,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect }from \"react\";\nimport { geoAlbers,geoPath } from 'd3';\n\nimport datum from '../mapfinal.json'\nimport geojson2svg from 'geojson2svg';\nimport parseSVG from 'parse-svg';\nimport useScreenWidth from '../Hooks/useScreenWidth'\nimport useScreenHeight from '../Hooks/useScreenHeight'\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\n\n\nfunction Marks ({data},props){\n    \n   \n  \n    \n    let screenWidth = useScreenWidth()\n    let screenHeight = useScreenHeight()\n    var width = 0.3 * screenWidth,\n    height = 0.6 * screenHeight;\n    var projection = geoAlbers()\n    .center([0, 55.4])\n    .rotate([4.4, 0])\n    .parallels([50, 60])\n    .scale(1000)\n    .translate([width / 2, height / 2]);\n\n\nconst path = geoPath(projection).projection(projection);\n\n\nreturn (\n    \n    <g className=\"marks\">\n      {\n        datum.features.filter((feature,index)=> index !== 5).map((feature, index) => {\n          // console.log(feature.properties.NAME_2)\n          if (index === 12){\n            console.log(feta)\n            return (\n         \n              <path stroke='black' fillRule='nonzero' fill='red' d = {path(feature)}></path> \n            )\n          }\n          \n          return (\n         \n          <path stroke='black' fillRule='nonzero' fill='none' d = {path(feature)}></path> \n        )})\n        //svgStrings.map(string => ReactHtmlParser(string))\n      }\n      \n    </g>\n  );\n} \n\nexport default Marks\n"]},"metadata":{},"sourceType":"module"}